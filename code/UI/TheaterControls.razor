@using Sandbox.UI
@using System

@inherits PanelComponent
<style>
    TheaterControls{
        width: 500px;//24%;
		height: 48%;
        right:2%;
        top:auto;
        bottom: auto;
        align-self: center;
        color: white;
        font-family:BerlinSansFBDemi;
        font-size: 44px;
        font-weight: bolder;
        border-radius: 14px;
        background-color: #1115;
        backdrop-filter: blur(20px);
		flex-direction: column;
        display: flex;
		pointer-events: all;
		transform: scale(1);
        transition: all 0.4s ease-in-out;
        overflow: hidden;
       
        .container{
            align-items:center;
            justify-content: center;
            bottom: auto;
            width: 100%;
            height: 10%;
            position: relative;
            background-color: rgba(0, 215, 186, 0.205);
        }
        .volume_container{
            align-items:center;
            justify-content: center;
            bottom: 11%;
            width: 100%;
            padding-right: 2%;
            height: 10%;
 
            background-color: rgba(0, 215, 186, 0.205);
        }
        .volume_icon {
            background-size:50%;
            width:14%;
            height:100%;
            right:-1%;
            background-color: transparent;
            background-repeat: no-repeat;
            background-position: center center;
            color: transparent;
        }
        .video_time{
            font-size: 16px;
            background-color: rgba(255, 0, 0, 0.411);
            border-radius: 4px;
            margin-right: 1%;
            padding: .5%;
        }
        .cbutt {
      
            background-size: 70%;
            width:10%;
            height:80%;
            padding: 2%;
            

            background-color: transparent;
            background-repeat: no-repeat;
            background-position: center center;
    
            color: transparent;
            opacity: 0.5;
            transition: opacity 250ms;
            transition: background-color 250ms ease;
        }
        .cbutt:hover {
            cursor: pointer;
            opacity: 1;
            background-color: rgb(192, 64, 64);
            sound-in:ui.button.over;
        }
        .slidercontrol{
            top: 10%;
            margin-left: 1%;
        }
        
        .title{
            background-color: rgb(0, 215, 187);
            opacity: 0.3;
            justify-content: center;
            align-items: center;
            width: 100%;
            padding: 1%;
        }
        .vote{
            
            opacity: 0.7;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 350px;
            gap:10px;
            
            .counter{
                opacity: 0.3;
                justify-content: center;
                align-items: center;
                width: 100%;
                font-size: 110px;
                flex-shrink: 0;
            }
            .text{
                opacity: 0.3;
                align-items: center;
                font-size: 30px;
            }
            .button{
                opacity: 0.7;
                justify-content: center;
				align-items: center;
				background-color: rgba(0, 215, 186, 0.192);
                border-radius: 10%;
				padding: 2%;
				gap: 5px;
				.i{
					background-color: rgba(0, 255, 13, 0.548);
					border-radius: 100%;
				}
            }
            .button:hover{
                cursor: pointer;
                opacity: 1;
                background-color: rgba(0, 215, 186, 0.301);
            }
        }
		&.hide{
            
			transition: all 0.4s ease-in-out;
			transform: scale(0);
            width: 0px;//%
            right:-20%;
            pointer-events: none;
            .slidercontrol{
                pointer-events: none;
            }
           
		}
    }
</style>
<root class="@((Input.Down("queue")&&!MediaPlayer.PanelComponent.Components.TryGet<RequestMenu>(out var _)) ? "" : "hide")">
    <div class="title">Theater Control</div>
    <div class="vote">
        <div class="counter">@(MediaController.CountSkips(MediaPlayer.GameObject.Id)-MediaPlayer.SkipList.Count)</div>
        <div class="text">MORE VOTE TO SKIP</div>
        <button class="button" @onclick=@(()=>MediaController.VoteSkip(MediaPlayer.GameObject.Id))><i class="i">add_task</i>VOTE FOR SKIP</button>
    </div>
    <div class="volume_container">
        <div class="volume_icon" style="background-image:url(/ui/volume.png);"></div>
        <CinemaSlider @ref="VolumeSlider" class="sndslider" onclick=@VolumeSet/>
    </div>

    <div class="container">
        <button @onclick=@(()=>TogglePlay()) class="cbutt" style="background-image:url(@ToggleImg);"></button>
        <button @onclick=@(()=>Skip()) class="cbutt" style="background-image:url(/ui/skip.png);"></button>
        <CinemaSlider @ref="TimeLine" onclick=@TimeLineSeek/>
        @if(MediaPlayer.Service!=null){
            <div class="video_time">@(ConvertTime(MediaPlayer.Curtime)=="00:00:00"?"‚óè Live":ConvertTime(MediaPlayer.Curtime))</div>
        }
    </div>
</root>
@code{
    private CinemaSlider TimeLine {get;set;}=new();
    private CinemaSlider VolumeSlider {get;set;}=new();
    public MediaPlayer MediaPlayer {get;set;}
    private float NextThink{get;set;}=0;
    private string ToggleImg {get;set;}="/ui/pause.png";
    protected override void OnUpdate(){
       
        base.OnUpdate();
        if (MediaPlayer.Paused){ToggleImg="/ui/play.png";}else{ToggleImg="/ui/pause.png";}
        if (TimeLine!=null){TimeLine.Max=MediaPlayer.Duration;}
        if (VolumeSlider!=null){VolumeSlider.Value=MediaPlayer.Volume;}
        if (TimeLine!=null){TimeLine.Value=Math.Clamp(MediaPlayer.Curtime,MediaPlayer.Duration/100*2,MediaPlayer.Duration);}
    }
    
    
    void TogglePlay(){
        if (!Connection.Local.IsHost){
            if (Scene.Components.TryGet<Chat>(out var Chat, FindMode.EnabledInSelfAndDescendants)){
			    Chat.AddLocalText("Failed to toggle play! Only host can do this.","video_settings");
		    }
        }else{
            MediaController.TogglePlay(MediaPlayer.GameObject.Id);
        }
    }
    
    void Skip(){
        if (!Connection.Local.IsHost){
            if (Scene.Components.TryGet<Chat>(out var Chat, FindMode.EnabledInSelfAndDescendants)){
			    Chat.AddLocalText("Failed to skip! Only host can do this.","video_settings");
		    }
        }else{
            MediaController.Skip(MediaPlayer.GameObject.Id);
        }
    }
    void TimeLineSeek(){
        if (!Connection.Local.IsHost){
            if (Scene.Components.TryGet<Chat>(out var Chat, FindMode.EnabledInSelfAndDescendants)){
			    Chat.AddLocalText("Failed to seek! Only host can do this.","video_settings");
		    }
        }else{
             MediaController.Seek(MediaPlayer.GameObject.Id,Convert.ToSingle(TimeLine.ScreenPosToValue(Mouse.Position)));
        }
    }
    void VolumeSet(){
        MediaController.SetVolume(MediaPlayer.GameObject.Id,Convert.ToSingle(VolumeSlider.ScreenPosToValue(Mouse.Position)));
    }
    protected override void OnDestroy()
    {
        Panel?.Delete();
        base.OnDestroy();
    }
    protected override void OnStart()
    {
        Flags=ComponentFlags.NotNetworked;
        //GameObject.NetworkMode=NetworkMode.Never;
        base.OnStart();
        VolumeSlider.Value=MediaPlayer.Volume;
    }

    static string ConvertTime(float val)
    {
        TimeSpan time=TimeSpan.FromSeconds(val);
        return $"{time.Hours:D2}:{time.Minutes:D2}:{time.Seconds:D2}";
    }


    protected override int BuildHash()
    {
        return HashCode.Combine(Input.Down("queue")+MediaPlayer.Curtime.ToString());
    }
}